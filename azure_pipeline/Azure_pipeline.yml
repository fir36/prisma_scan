trigger:
  branches:
    include:
      - main  # Trigger when pushing to the main branch

stages:
- stage: PrismaScan
  displayName: "Prisma Scan"
  jobs:
  - job: FetchScanResults
    displayName: "Fetch Prisma Scan Results from GitHub"
    pool:
      name: "Default"  # Replace with your actual agent pool
    steps:
     - script: |
        echo "A Fetching Prisma Cloud scan results from GitHub Actions..."

        # Fetch latest GitHub Action Run ID
        RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_PAT" \
        -H "Accept: application/vnd.github.v3+json" \
        "https://api.github.com/repos/fir36/prisma_scan/actions/runs")

        echo "GitHub API Response:"
        echo "$RESPONSE"  # Print full response for debugging
    
        # Extract latest GitHub Action Run ID
        RUN_ID=$(echo "$RESPONSE" | jq -r '.workflow_runs[0].id')

        if [ -z "$RUN_ID" ] || [ "$RUN_ID" == "null" ]; then
          echo "❌ Failed to get GitHub Action Run ID"
          exit 1
        fi

        echo "✅ GitHub Action Run ID: $RUN_ID"
      displayName: "Fetch and Debug GitHub Logs"
      env:
        GITHUB_PAT: $(GITHUB_PAT)
    - script: |
        echo "Fetching Prisma Cloud scan results from GitHub Actions..."

        # Install dependencies
        sudo apt-get update && sudo apt-get install -y jq unzip

        # Fetch latest GitHub Action Run ID
        RUN_ID=$(curl -s -H "Authorization: Bearer $GITHUB_PAT" \
        -H "Accept: application/vnd.github.v3+json" \
        "https://api.github.com/repos/fir36/prisma_scan/actions/runs" | jq -r '.workflow_runs[0].id')

        if [ -z "$RUN_ID" ] || [ "$RUN_ID" == "null" ]; then
          echo "❌ Failed to get GitHub Action Run ID"
          exit 1
        fi

        echo "✅ GitHub Action Run ID: $RUN_ID"

        # Fetch logs
        echo "Fetching logs..."
        curl -s -H "Authorization: Bearer $GITHUB_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/fir36/prisma_scan/actions/runs/$RUN_ID/logs" \
            -o github_scan_logs.zip

        if [ ! -f "github_scan_logs.zip" ]; then
          echo "❌ Log download failed!"
          exit 1
        fi

        echo "✅ Extracting logs..."
        unzip -o github_scan_logs.zip -d github_logs/
      displayName: "Fetch and Extract GitHub Logs"
      env:
        GITHUB_PAT: $(GITHUB_PAT)  # Move env inside the script step

    - script: |
        echo "✅ Printing test.yaml contents..."
        cat github_logs/test.yaml
      displayName: "Show test.yaml Contents"


- stage: Development
  displayName: "Development Stage"
  dependsOn: PrismaScan
  jobs:
  - job: Build
    displayName: "Build the Application"
    pool:
      name: "Default"  # Use the same agent pool
    steps:
    - script: echo "Building the application..."

- stage: Deploy
  displayName: "Deploy Stage"
  dependsOn: Development
  jobs:
  - job: Deploy
    displayName: "Deploy the Application"
    pool:
      name: "Default"  # Use the same agent pool
    steps:
    - script: echo "Deploying the application..."
